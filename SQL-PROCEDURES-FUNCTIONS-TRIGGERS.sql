CREATE TABLE LIVROS(
 ID SERIAL PRIMARY KEY,
 TITULO VARCHAR(50) NOT NULL,
 PRECO NUMERIC(6,2) NOT NULL,
 QUANTIDADE_ESTOQUE INTEGER NOT NULL,
 DATA_ENTRADA DATE NOT NULL DEFAULT CURRENT_DATE
)

INSERT INTO LIVROS (TITULO, PRECO, QUANTIDADE_ESTOQUE, DATA_ENTRADA)
VALUES 
    ('The Great Gatsby', 49.90, 10, '2024-06-15'),
    ('1984', 39.50, 25, '2023-12-01'),
    ('To Kill a Mockingbird', 59.90, 15, '2024-01-20'),
    ('Pride and Prejudice', 29.99, 30, '2023-10-10'),
    ('Moby Dick', 74.50, 5, '2024-03-05'),
    ('War and Peace', 99.90, 8, '2024-04-22'),
    ('The Catcher in the Rye', 45.00, 12, '2024-05-10'),
    ('Jane Eyre', 39.00, 20, '2023-09-15'),
    ('Brave New World', 54.90, 18, '2024-07-01'),
    ('The Hobbit', 79.90, 6, '2024-02-15');


SELECT * FROM LIVROS

CREATE TABLE TIPO_CLIENTE(
ID SERIAL PRIMARY KEY,
NOME VARCHAR(20) NOT NULL
)

SELECT * FROM TIPO_CLIENTE

INSERT INTO TIPO_CLIENTE(NOME) 
VALUES('Estudante'),('Regular')

CREATE TABLE CLIENTES (
ID SERIAL PRIMARY KEY,
NOME VARCHAR(50) NOT NULL,
TIPO_CLIENTE_ID INTEGER NOT NULL,
PONTOS_FIDELIDADE INTEGER DEFAULT 0,
CONSTRAINT FK_TIPO_CLIENTE FOREIGN KEY (TIPO_CLIENTE_ID) REFERENCES TIPO_CLIENTE(ID)
)

ALTER TABLE CLIENTES ADD COLUMN PONTOS_FIDELIDADE INTEGER DEFAULT 0

INSERT INTO CLIENTES (NOME, TIPO_CLIENTE_ID)
VALUES 
    ('Alice Santos', 1),  -- Estudante
    ('Carlos Oliveira', 2),  -- Regular
    ('Beatriz Lima', 1),  -- Estudante
    ('Diego Souza', 2),  -- Regular
    ('Fernanda Ribeiro', 1),  -- Estudante
    ('Gustavo Pereira', 2),  -- Regular
    ('Helena Martins', 1),  -- Estudante
    ('João Alves', 2),  -- Regular
    ('Livia Costa', 1),  -- Estudante
    ('Marcos Fernandes', 2);  -- Regular


SELECT * FROM CLIENTES

CREATE TABLE VENDAS(
ID SERIAL PRIMARY KEY,
LIVRO_ID INTEGER NOT NULL,
CLIENTE_ID INTEGER NOT NULL,
QUANTIDADE INTEGER NOT NULL,
VALOR_TOTAL NUMERIC(6,2) NOT NULL,
DATA_VENDA DATE DEFAULT CURRENT_TIMESTAMP,
CONSTRAINT FK_LIVRO FOREIGN KEY (LIVRO_ID) REFERENCES LIVROS(ID),
CONSTRAINT FK_CLIENTE FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(ID)
)

SELECT * FROM VENDAS

CREATE TABLE CUPONS(
ID SERIAL PRIMARY KEY,
CLIENTE_ID INTEGER NOT NULL,
VALOR NUMERIC(6,2) NOT NULL,
DATA_VALIDADE DATE NOT NULL,
STATUS BOOLEAN NOT NULL,
CONSTRAINT FK_CLIENTE FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(ID)
)

SELECT * FROM CUPONS


CREATE TABLE TIPOS_OPERACAO(
ID SERIAL PRIMARY KEY,
NOME VARCHAR(20) NOT NULL 
)

ALTER TABLE TIPOS_OPERACAO ADD COLUMN NOME VARCHAR(50)

INSERT INTO TIPOS_OPERACAO(NOME)
VALUES('Dinheiro'),('Cartão Credito'),('Cartao Debito'),('Transferencia bancaria'),('PIX')

SELECT * FROM TIPOS_OPERACAO

CREATE TABLE AUDITORIA(
ID SERIAL PRIMARY KEY,
TIPO_OPERACAO INTEGER NOT NULL,
DATA_AUDITORIA DATE DEFAULT CURRENT_TIMESTAMP,
DETALHES VARCHAR(100),
VALOR_VENDA NUMERIC(6,2),
CONSTRAINT FK_TIPO_OPERACAO FOREIGN KEY (TIPO_OPERACAO) REFERENCES TIPOS_OPERACAO(ID)
)

ALTER TABLE AUDITORIA DROP COLUMN TIPO_OPERACAO

SELECT * FROM AUDITORIA

CREATE TABLE TIPOS_ALERTA(
ID SERIAL PRIMARY KEY,
NOME VARCHAR(50) NOT NULL
)

INSERT INTO TIPOS_ALERTA(NOME) VALUES('')

SELECT * FROM TIPOS_ALERTA

CREATE TABLE ALERTAS_ESTOQUE(
ID SERIAL PRIMARY KEY,
LIVRO_ID INTEGER NOT NULL,
QUANTIDADE INTEGER NOT NULL,
DATA_ALERTA DATE DEFAULT CURRENT_TIMESTAMP,
TIPO_ALERTA INTEGER NOT NULL,
CONSTRAINT FK_TIP0_ALERTA FOREIGN KEY (TIPO_ALERTA) REFERENCES TIPOS_ALERTA(ID)
)

SELECT * FROM ALERTAS_ESTOQUE

CREATE OR REPLACE FUNCTION CALCULA_DESCONTO(QUANTIDADE INT,
TIPO_CLIENTE INT,
ID_LIVRO INT
)
RETURNS DECIMAL AS $$
DECLARE
	DESCONTO_TOTAL DECIMAL(6,2);
	PRECO_TOTAL DECIMAL(6,2);
	PORCENTAGEM_DESCONTO DECIMAL(6,2) := 0.00;
	DATA_PUBLICACAO DATE;
BEGIN 
	SELECT DATA_ENTRADA INTO DATA_PUBLICACAO FROM LIVROS L WHERE L.ID = ID_LIVRO;
	
	IF QUANTIDADE>1 THEN
		PORCENTAGEM_DESCONTO := PORCENTAGEM_DESCONTO + (QUANTIDADE*0.05);
	END IF;
	IF TIPO_CLIENTE = 1 THEN
		PORCENTAGEM_DESCONTO := PORCENTAGEM_DESCONTO + 0.10; 
	END IF;
	IF DATA_PUBLICACAO <= (CURRENT_DATE - INTERVAL '6 months') THEN
		PORCENTAGEM_DESCONTO := PORCENTAGEM_DESCONTO + 0.15;
	END IF;

	SELECT PRECO INTO PRECO_TOTAL FROM LIVROS L WHERE L.ID = ID_LIVRO;
	DESCONTO_TOTAL := PORCENTAGEM_DESCONTO * PRECO_TOTAL;
	RETURN DESCONTO_TOTAL;
END;
$$ LANGUAGE PLPGSQL;

SELECT * FROM LIVROS

SELECT CALCULA_DESCONTO(3,1,2)

-- Registre a venda de um livro
-- Atualize o estoque
-- Registre pontos de fidelidade para o cliente (1 ponto para cada R$ 10 em compras)
-- Gere um cupom de desconto se o cliente atingir 100 pontos

CREATE OR REPLACE PROCEDURE ATUALIZA_ESTOQUE(
ID_LIVRO INT,
QUANTIDADE_COMPRADA INT
)
LANGUAGE PLPGSQL AS $$
BEGIN
	UPDATE LIVROS SET QUANTIDADE_ESTOQUE = QUANTIDADE_ESTOQUE - QUANTIDADE_COMPRADA WHERE ID = ID_LIVRO;
	COMMIT;
END;
$$;

CALL ATUALIZA_ESTOQUE(1,2)

SELECT * FROM LIVROS

CREATE OR REPLACE PROCEDURE REGISTRA_PONTOS_FIDELIDADE(
ID_CLIENTE INT,
PRECO_TOTAL NUMERIC(6,2)
)
LANGUAGE PLPGSQL AS $$
DECLARE
	PONTOS_TOTAL INT;
    OLD_PONTOS_FIDELIDADE INT;
BEGIN
	PONTOS_TOTAL = PRECO_TOTAL / 10;
	IF EXISTS(SELECT 1 FROM CLIENTES WHERE ID = ID_CLIENTE) THEN
		SELECT PONTOS_FIDELIDADE INTO OLD_PONTOS_FIDELIDADE
        FROM CLIENTES WHERE ID = ID_CLIENTE;
		UPDATE CLIENTES 
		SET PONTOS_FIDELIDADE = OLD_PONTOS_FIDELIDADE + PONTOS_TOTAL WHERE ID = ID_CLIENTE;
	ELSE
		RAISE NOTICE 'Client with id % does not exist.', ID_CLIENTE;
	END IF;
	COMMIT;
END;
$$;

CALL REGISTRA_PONTOS_FIDELIDADE(1,1000)

SELECT * FROM CLIENTES

CREATE OR REPLACE PROCEDURE GERA_CUPOM(
ID_CLIENTE INT
)
LANGUAGE PLPGSQL AS $$
DECLARE
	CURRENT_POINTS INT;
BEGIN
	IF EXISTS(SELECT 1 FROM CLIENTES WHERE ID = ID_CLIENTE) THEN
		SELECT PONTOS_FIDELIDADE INTO CURRENT_POINTS
    	FROM CLIENTES WHERE ID = ID_CLIENTE;
		IF CURRENT_POINTS = 100 THEN
			INSERT INTO CUPONS(CLIENTE_ID,VALOR,DATA_VALIDADE,STATUS)
			VALUES(ID_CLIENTE,20, CURRENT_DATE + INTERVAL '2 months', TRUE);
		END IF;
	ELSE
		RAISE NOTICE 'Client with id % does not exist.', ID_CLIENTE;
	END IF;
END;
$$;

SELECT * FROM CLIENTES

UPDATE CLIENTES SET PONTOS_FIDELIDADE = 100 WHERE ID = 1

CALL GERA_CUPOM(1)

-- Um trigger que:
-- Monitore o estoque de livros **
-- Gere alertas para livros com menos de 5 unidades **

CREATE TABLE LOG_MOVIMENTACAO_ESTOQUE(
ID SERIAL PRIMARY KEY,
ID_LIVRO INT,
-- TITULO VARCHAR(50) NOT NULL,
QUANTIDADE_ANTERIOR INT,
QUANTIDADE_NOVA INT,
DESCRICAO VARCHAR(50),
DATA_MOVIMENTO TIMESTAMP,
CONSTRAINT FK_LIVRO FOREIGN KEY (ID_LIVRO) REFERENCES LIVROS(ID)
)

ALTER TABLE LOG_MOVIMENTACAO_ESTOQUE DROP COLUMN TITULO

CREATE OR REPLACE FUNCTION MONITORAR_ESTOQUE()
RETURNS TRIGGER AS $$
BEGIN
	INSERT INTO LOG_MOVIMENTACAO_ESTOQUE(
		ID_LIVRO,
		QUANTIDADE_ANTERIOR,
		QUANTIDADE_NOVA,
		DATA_MOVIMENTO
	) VALUES(
		NEW.ID,
		OLD.QUANTIDADE_ESTOQUE,
		NEW.QUANTIDADE_ESTOQUE,
		CURRENT_TIMESTAMP
	);
	IF NEW.QUANTIDADE_ESTOQUE < 5 THEN
		INSERT INTO ALERTAS_ESTOQUE(LIVRO_ID,QUANTIDADE,TIPO_ALERTA)
		VALUES(NEW.ID,NEW.QUANTIDADE_ESTOQUE,1);
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TRIGGER_MONITORAMENTO_ESTOQUE 
BEFORE UPDATE ON LIVROS
FOR EACH ROW
EXECUTE FUNCTION MONITORAR_ESTOQUE();

UPDATE LIVROS SET QUANTIDADE_ESTOQUE = 10 WHERE ID = 1

SELECT * FROM LIVROS

SELECT * FROM LOG_MOVIMENTACAO_ESTOQUE E INNER JOIN LIVROS L ON L.ID = E.ID_LIVRO

ALTER TABLE LOG_MOVIMENTACAO_ESTOQUE DROP COLUMN DESCRICAO

SELECT * FROM ALERTAS_ESTOQUE A INNER JOIN TIPOS_ALERTA TA ON A.TIPO_ALERTA = TA.ID 

SELECT * FROM TIPOS_ALERTA

INSERT INTO TIPOS_ALERTA(NOME) VALUES('Baixo estoque')

-- Um trigger que 
-- Registre em uma tabela de auditoria todas as vendas acima de R$ 200
-- Marque automaticamente para promoção livros que não são vendidos há mais de 3 meses

CREATE OR REPLACE FUNCTION MONITORA_VENDAS()
RETURNS TRIGGER AS $$
BEGIN
	IF NEW.VALOR_TOTAL > 200 THEN
		INSERT INTO AUDITORIA(DETALHES,VALOR_VENDA)
		VALUES('Valor da venda ultrapassou',NEW.VALOR_TOTAL);
	END IF;
	RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TRIGGER_MONITORAMENTO_VENDAS 
BEFORE INSERT ON VENDAS
FOR EACH ROW
EXECUTE FUNCTION MONITORA_VENDAS();

INSERT INTO VENDAS(LIVRO_ID,CLIENTE_ID,QUANTIDADE,VALOR_TOTAL)
VALUES(6,2,3,299.70)

SELECT * FROM LIVROS

SELECT * FROM TIPOS_OPERACAO

SELECT * FROM AUDITORIA